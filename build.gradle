plugins {
	id 'java'
	id 'com.jfrog.artifactory' version '4.9.0'
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.7.RELEASE'
	id 'nebula.maven-publish' version '9.5.0'
	id 'nebula.release' version '9.2.0'
	id 'nebula.info' version '5.0.0'
}

group = 'io.pivotal.spinnaker'

repositories {
	mavenCentral()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	implementation('io.micrometer:micrometer-registry-prometheus')
	implementation 'io.prometheus:simpleclient_pushgateway:0.5.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test')

	implementation 'commons-io:commons-io:latest.release'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	implementation 'com.netflix.frigga:frigga:0.18.0'

	compileOnly 'org.projectlombok:lombok:latest.release'
	annotationProcessor 'org.projectlombok:lombok:latest.release'
}

if(hasProperty('artifactoryUser') && hasProperty('artifactoryPassword')) {
	artifactory {
		contextUrl = 'https://repo.spring.io'
		publish {
			repository {
				repoKey = 'libs-spinnaker-local'
				username = artifactoryUser
				password = artifactoryPassword
			}
			defaults {
				publications 'nebula'
			}
		}
	}
	tasks.release.dependsOn('artifactoryDeploy')
}

publishing {
	publications {
		withType(MavenPublication) {
			pom.withXml {
				Node pomNode = asNode()
				pomNode.remove(pomNode.get("dependencies"))
				pomNode.remove(pomNode.get("dependencyManagement"))
			}
		}
	}
}

if(hasProperty('nexusUrl')) {
	publishing {
		repositories {
			maven {
				name = 'nexus'
				url = "${nexusUrl}/repository/maven-releases/"
				credentials {
					username = nexusUser
					password = nexusPassword
				}
			}
		}
	}
}

// Can be used with a Jinja template to inflate a Maven artifact from Jenkins trigger context.
task('generateBuildProperties') {
	doLast {
		file('build/build.properties').newWriter().withWriter { w ->
		  w << "BUILD_VERSION=$project.version"
		}
	}
}

build.dependsOn('generateBuildProperties')

throw new IllegalStateException("fail me")