plugins {
	id 'java'
	id 'com.jfrog.artifactory' version '4.9.0'
	id 'org.springframework.boot' version '2.2.0.M2'
	id 'io.spring.dependency-management' version '1.0.7.RELEASE'
	id 'nebula.maven-publish' version '9.5.0'
	id 'nebula.release' version '13.0.0'
	id 'nebula.info' version '5.0.0'
	id 'com.bmuschko.docker-spring-boot-application' version '4.7.0'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

group = 'io.pivotal.spinnaker'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
	jcenter()
}

if(hasProperty('dockerUser') && hasProperty('dockerPassword')) {
	docker {
		registryCredentials {
			username = dockerUser
			password = dockerPassword
			email = 'jkschneider@gmail.com'
		}

		springBootApplication {
			tag = "$dockerUser/multifoundationmetrics:${project.version.toString().contains('+') ? 'SNAPSHOT' : project.version}"

			// contains libc6 needed by rsocket, which the default of
			// openjdk:jre-alpine does not
			baseImage = 'adoptopenjdk/openjdk8:alpine-slim'
		}
	}

	tasks.release.dependsOn('dockerPushImage')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.micrometer.prometheus:prometheus-rsocket-spring:0.9.0'

	implementation 'io.fabric8:kubernetes-client:latest.release'
	implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-config:1.0.3.RELEASE'

	implementation 'commons-io:commons-io:latest.release'
	implementation 'com.netflix.frigga:frigga:0.18.0'

	compileOnly 'org.projectlombok:lombok:latest.release'
	annotationProcessor 'org.projectlombok:lombok:latest.release'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

if(hasProperty('artifactoryUser') && hasProperty('artifactoryPassword')) {
	artifactory {
		contextUrl = 'https://repo.spring.io'
		publish {
			repository {
				repoKey = 'libs-spinnaker-local'
				username = artifactoryUser
				password = artifactoryPassword
			}
			defaults {
				publications 'nebula'
			}
		}
	}
	tasks.release.dependsOn('artifactoryDeploy')
}

publishing {
	publications {
		withType(MavenPublication) {
			pom.withXml {
				Node pomNode = asNode()
				pomNode.remove(pomNode.get("dependencies"))
				pomNode.remove(pomNode.get("dependencyManagement"))
			}
		}
	}
}

if(hasProperty('nexusUrl')) {
	publishing {
		repositories {
			maven {
				name = 'nexus'
				url = "${nexusUrl}/repository/maven-releases/"
				credentials {
					username = nexusUser
					password = nexusPassword
				}
			}
		}
	}
}

// Can be used with a Jinja template to inflate a Maven artifact from Jenkins trigger context.
task('generateBuildProperties') {
	doLast {
		file('build/build.properties').newWriter().withWriter { w ->
		  w << "BUILD_VERSION=$project.version"
		}
	}
}

build.dependsOn('generateBuildProperties')